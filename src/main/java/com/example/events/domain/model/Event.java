package com.example.events.domain.model;import com.example.events.domain.vo.*;import lombok.Getter;import java.time.Instant;import java.util.Objects;import java.util.UUID;@Getterpublic final class Event {    private final EventId eventId;    private final VenueId venueId;    private EventName name;    private EventDescription description;    private Capacity capacity;    private TimeSlot timeSlot;    private EventStatus status;    private EventVisibility visibility;    private EventCategory category;    private AccessPolicy accessPolicy;    private Event(EventId id, VenueId venue, EventName name, EventDescription desc,                  Capacity cap, TimeSlot slot, AccessPolicy policy) {        this.eventId = Objects.requireNonNull(id);        this.venueId = Objects.requireNonNull(venue);        this.name = Objects.requireNonNull(name);        this.description = Objects.requireNonNull(desc);        this.capacity = Objects.requireNonNull(cap);        this.timeSlot = Objects.requireNonNull(slot);        this.accessPolicy = Objects.requireNonNull(policy);        this.status = EventStatus.DRAFT;        this.visibility = EventVisibility.HIDDEN;        this.category = EventCategory.NONE;    }    public UUID id(){        return eventId.value();    }    public void open(){        if (status.equals(EventStatus.CLOSE)) throw new IllegalStateException("Cannot re-open a close event");        if (status.equals(EventStatus.CANCELLED)) throw new IllegalStateException("Cannot re-open a canceled event");        this.status = EventStatus.OPEN;    }    public void cancel(){        this.status = EventStatus.CANCELLED;    }    public void close(){        this.status = EventStatus.CLOSE;    }    public void publish(){        if (status.equals(EventStatus.DRAFT)) throw new IllegalStateException("Cannot publish a draft event");        this.visibility = EventVisibility.PUBLIC;    }    public void hide(){        this.visibility = EventVisibility.HIDDEN;    }    public static Event create(            String eventId,            String venueId,            String eventName,            String eventDescription,            int capacity,            Instant startAt,            Instant endAt    ){        EventId domainEventId = new EventId(UUID.fromString(eventId));        VenueId domainVenueId = new VenueId(UUID.fromString(venueId));        EventName domainEventName = new EventName(eventName);        EventDescription domainEventDescription = new EventDescription(eventDescription);        Capacity domainCapacity = new Capacity(capacity);        TimeSlot timeSlot = new TimeSlot(startAt, endAt);        AccessPolicy accessPolicy = new PublicAccess();        return new Event(                domainEventId,                domainVenueId,                domainEventName,                domainEventDescription,                domainCapacity,                timeSlot,                accessPolicy        );    }    public static Event create(EventId id, VenueId venue, EventName name,                               EventDescription desc, Capacity cap, TimeSlot slot) {        return new Event(id, venue, name, desc, cap, slot, new PublicAccess());    }    @Override    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        Event event = (Event) o;        return Objects.equals(getEventId(), event.getEventId()) && Objects.equals(getVenueId(), event.getVenueId()) && Objects.equals(getName(), event.getName()) && Objects.equals(getDescription(), event.getDescription()) && Objects.equals(getCapacity(), event.getCapacity()) && Objects.equals(getTimeSlot(), event.getTimeSlot()) && getStatus() == event.getStatus() && getVisibility() == event.getVisibility() && getCategory() == event.getCategory() && Objects.equals(getAccessPolicy(), event.getAccessPolicy());    }    @Override    public int hashCode() {        return Objects.hash(getEventId());    }}