package com.example.catalog.domain.model;import com.example.catalog.domain.vo.*;import lombok.Getter;import java.time.Instant;import java.util.Objects;import java.util.UUID;@Getterpublic final class Event {    private final EventId eventId;    private final VenueId venueId;    private EventName name;    private EventDescription description;    private Capacity capacity;    private TimeSlot timeSlot;    private EventStatus status;    private EventVisibility visibility;    private EventCategory category;    private AccessPolicy accessPolicy;    private Event(EventId id, VenueId venue, EventName name, EventDescription desc,                  Capacity cap, TimeSlot slot, AccessPolicy policy, EventStatus status, EventVisibility visibility, EventCategory category) {        this.eventId = Objects.requireNonNull(id);        this.venueId = Objects.requireNonNull(venue);        this.name = Objects.requireNonNull(name);        this.description = Objects.requireNonNull(desc);        this.capacity = Objects.requireNonNull(cap);        this.timeSlot = Objects.requireNonNull(slot);        this.accessPolicy = Objects.requireNonNull(policy);        this.status = status;        this.visibility = visibility;        this.category = category;    }    public UUID id() {        return eventId.value();    }    public void open() {        ensureIsNotClosed();        ensureIsNotCancelled();        this.status = EventStatus.OPEN;    }    public void modifyName(String value) {        ensureIsDraft();        this.name = new EventName(value);    }    public void modifyDescription(String value) {        ensureIsDraft();        this.description = new EventDescription(value);    }    public void modifyCapacity(int n) {        ensureIsDraft();        this.capacity = new Capacity(n);    }    public void modifyTimeSlot(TimeSlot slot) {        ensureIsDraft();        this.timeSlot = slot;    }    public void cancel() {        this.status = EventStatus.CANCELLED;    }    public void close() {        ensureIsOpen();        this.status = EventStatus.CLOSE;    }    public void publish() {        ensureIsNotDraft();        this.visibility = EventVisibility.PUBLIC;    }    public void hide() {        this.visibility = EventVisibility.HIDDEN;    }    public void makePrivate(String password) {        this.accessPolicy = new PrivateAccess(password);    }    public void makePublic() {        this.accessPolicy = new PublicAccess();    }    public static Event createNew(String eventId, String venueId, String eventName,                               String eventDescription, int capacity, Instant startAt, Instant endAt) {        return new Event(                new EventId(UUID.fromString(eventId)),                new VenueId(UUID.fromString(venueId)),                new EventName(eventName),                new EventDescription(eventDescription),                new Capacity(capacity),                new TimeSlot(startAt, endAt),                new PublicAccess(),                EventStatus.DRAFT,                EventVisibility.HIDDEN,                EventCategory.NONE        );    }    public static Event recreateExisting(EventId eventId, VenueId venueId, EventName name,                                  EventDescription description, Capacity capacity,                                  TimeSlot timeSlot, EventStatus status,                                  EventVisibility visibility, EventCategory category,                                  AccessPolicy accessPolicy) {        return new Event(                eventId,                venueId,                name,                description,                capacity,                timeSlot,                accessPolicy,                status,                visibility,                category        );    }     @Override    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        Event event = (Event) o;        return Objects.equals(eventId, event.eventId) &&                Objects.equals(venueId, event.venueId) &&                Objects.equals(name, event.name) &&                Objects.equals(description, event.description) &&                Objects.equals(capacity, event.capacity) &&                Objects.equals(timeSlot, event.timeSlot) &&                status == event.status &&                visibility == event.visibility &&                category == event.category &&                Objects.equals(accessPolicy, event.accessPolicy);    }    @Override    public int hashCode() {        return Objects.hash(eventId);    }    private void ensureIsNotCancelled() {        if (status == EventStatus.CANCELLED) {            throw new IllegalStateException("Cannot perform this action on a canceled event");        }    }    private void ensureIsNotClosed() {        if (status == EventStatus.CLOSE) {            throw new IllegalStateException("Cannot perform this action on a closed event");        }    }    private void ensureIsDraft() {        if (status != EventStatus.DRAFT) {            throw new IllegalStateException("Action allowed only for draft events");        }    }    private void ensureIsNotDraft() {        if (status == EventStatus.DRAFT) {            throw new IllegalStateException("Cannot perform this action on a draft event");        }    }    private void ensureIsOpen() {        if (status != EventStatus.OPEN) {            throw new IllegalStateException("Action allowed only for open events");        }    }}